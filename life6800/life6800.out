0001                               *
0002                               * Conway's Game of Life
0003                               * for SBC6800 (Bitboard)
0004                               * 2018 ryu10
0005                               *
0006                               *
0007                               * Mikbug Entries
0008 e075                          outch   equ $e075
0009 e07e                          pdata1  equ $e07e
0010 e0bf                          out2h   equ $e0bf
0011                               *
0012                               * Constants
0013 001b                          esc     equ $1b
0014 0004                          linebyte equ 4  ; widht of the buffer in bytes
0015 0020                          bwidth  equ 32   ; px width of the buffer
0016 0010                          bheight equ 16   ; height of the buffer
0017 0040                          buf_len equ bheight*linebyte   ; buffer length in bytes
0018 0003                          blen_mask equ linebyte-1 ; max# of bytes in a line
0019                               *
0020 0100                                  org $0100
0021 0100 ce 05 00           [ 3 ]         ldx #screen_buf1
0022 0103 ff 04 71           [ 6 ]         stx curr_bufp
0023 0106 ce 05 40           [ 3 ]         ldx #screen_buf2
0024 0109 ff 04 73           [ 6 ]         stx next_bufp
0025 010c 4f                 [ 2 ]         clra
0026 010d b7 04 6b           [ 5 ]         staa gen_ctr
0027 0110 b7 04 6c           [ 5 ]         staa gen_ctr+1
0028 0113 b7 04 6d           [ 5 ]         staa gen_ctr+2
0029 0116 b7 04 6e           [ 5 ]         staa gen_ctr+3
0030 0119 ce 04 21           [ 3 ]         ldx #screen_clr_d
0031 011c bd e0 7e           [ 9 ]         jsr pdata1
0032 011f ce 04 2a           [ 3 ]         ldx #screen_home_d
0033 0122 bd e0 7e           [ 9 ]         jsr pdata1
0034 0125 ce 04 3d           [ 3 ]         ldx #title_str_d
0035 0128 bd e0 7e           [ 9 ]         jsr pdata1
0036 012b bd 01 3d           [ 9 ]         jsr init_screen
0037 012e bd 01 61           [ 9 ] loop:   jsr mirror_edges ; make it toroidal
0038 0131 bd 03 a2           [ 9 ]         jsr print_screen
0039 0134 bd 01 c6           [ 9 ]         jsr gen_update ; update the next_buf based on the game rules
0040 0137 bd 04 0e           [ 9 ]         jsr swap_buffer
0041 013a 20 f2              [ 4 ]         bra loop
0042 013c 3f                 [12 ]         swi                 ; end main
0043                               *
0044                               init_screen:
0045 013d ce 04 89           [ 3 ]         ldx #screen_buf_init
0046 0140 ff 04 75           [ 6 ]         stx curr_adrs ; as a temporary workspace
0047 0143 fe 04 71           [ 5 ]         ldx curr_bufp
0048 0146 ff 04 6f           [ 6 ]         stx temp_word
0049 0149 86 40              [ 2 ]         ldaa #buf_len
0050                               init_scr1:
0051 014b fe 04 75           [ 5 ]         ldx curr_adrs
0052 014e e6 00              [ 5 ]         ldab 0,x
0053 0150 08                 [ 4 ]         inx
0054 0151 ff 04 75           [ 6 ]         stx curr_adrs
0055 0154 fe 04 6f           [ 5 ]         ldx temp_word
0056 0157 e7 00              [ 6 ]         stab 0,x
0057 0159 08                 [ 4 ]         inx
0058 015a ff 04 6f           [ 6 ]         stx temp_word
0059 015d 4a                 [ 2 ]         deca
0060 015e 26 eb              [ 4 ]         bne init_scr1
0061 0160 39                 [ 5 ]         rts
0062                               *
0063                               mirror_edges:
0064                               * mirror the buffer edges to make it a torus
0065                               * draw top & bottom edges
0066 0161 fe 04 71           [ 5 ]         ldx curr_bufp
0067 0164 c6 04              [ 2 ]         ldab #linebyte ; repeat four times
0068                               mirr_topbtm:
0069 0166 a6 04              [ 5 ]         ldaa linebyte,x
0070 0168 a7 3c              [ 6 ]         staa buf_len-linebyte,x ; mirror top to bottom edge
0071 016a a6 38              [ 5 ]         ldaa buf_len-linebyte-linebyte,x
0072 016c a7 00              [ 6 ]         staa 0,x ; mirror bottom to top edge
0073 016e 08                 [ 4 ]         inx
0074 016f 5a                 [ 2 ]         decb
0075 0170 26 f4              [ 4 ]         bne mirr_topbtm
0076                               * draw left & right edges
0077 0172 fe 04 71           [ 5 ]         ldx curr_bufp
0078 0175 86 04              [ 2 ]         ldaa #linebyte
0079 0177 08                 [ 4 ] mirr4:  inx
0080 0178 4a                 [ 2 ]         deca
0081 0179 26 fc              [ 4 ]         bne mirr4 ; start x from curr_bufp+linebyte (line#1)
0082 017b c6 0e              [ 2 ]         ldab #bheight-2 ; repeat 14 times
0083                               mirr_leftrt:
0084 017d 37                 [ 4 ]         pshb ; iter counter
0085 017e a6 00              [ 5 ]         ldaa 0,x
0086 0180 e6 03              [ 5 ]         ldab linebyte-1,x
0087 0182 49                 [ 2 ]         rola ; bit6->bit7
0088 0183 56                 [ 2 ]         rorb
0089 0184 49                 [ 2 ]         rola ; bit7->carry
0090 0185 59                 [ 2 ]         rolb ; carry->bit0
0091 0186 e7 03              [ 6 ]         stab linebyte-1,x ; copy left to right edge
0092 0188 a6 00              [ 5 ]         ldaa 0,x ; restore left
0093 018a 56                 [ 2 ]         rorb ; bit1->bit0
0094 018b 49                 [ 2 ]         rola
0095 018c 56                 [ 2 ]         rorb ; bit0->carry
0096 018d 46                 [ 2 ]         rora ; carry->bit7
0097 018e a7 00              [ 6 ]         staa 0,x ; copy right to left edge
0098 0190 86 04              [ 2 ]         ldaa #linebyte
0099 0192 08                 [ 4 ] mirr5:  inx
0100 0193 4a                 [ 2 ]         deca
0101 0194 26 fc              [ 4 ]         bne mirr5
0102 0196 33                 [ 4 ]         pulb ; iter counter
0103 0197 5a                 [ 2 ]         decb
0104 0198 26 e3              [ 4 ]         bne mirr_leftrt
0105                               * draw four corners
0106 019a fe 04 71           [ 5 ]         ldx curr_bufp
0107 019d a6 04              [ 5 ]         ldaa linebyte,x ; topleft to bottomright
0108 019f e6 3f              [ 5 ]         ldab buf_len-1,x
0109 01a1 49                 [ 2 ]         rola ; bit6->7
0110 01a2 56                 [ 2 ]         rorb
0111 01a3 49                 [ 2 ]         rola ; bit7->carry
0112 01a4 59                 [ 2 ]         rolb ; carry->bit0
0113 01a5 e7 3f              [ 6 ]         stab buf_len-1,x
0114 01a7 a6 3b              [ 5 ]         ldaa buf_len-linebyte-1,x ; bottomright to topleft
0115 01a9 e6 00              [ 5 ]         ldab 0,x
0116 01ab 46                 [ 2 ]         rora ; bit1->bit0
0117 01ac 59                 [ 2 ]         rolb
0118 01ad 46                 [ 2 ]         rora ; bit0->carry
0119 01ae 56                 [ 2 ]         rorb ; carry->MSB
0120 01af e7 00              [ 6 ]         stab 0,x
0121 01b1 a6 07              [ 5 ]         ldaa 2*linebyte-1,x; topright to bottomleft
0122 01b3 e6 3c              [ 5 ]         ldab buf_len-linebyte,x
0123 01b5 46                 [ 2 ]         rora ; bit1->bit0
0124 01b6 59                 [ 2 ]         rolb
0125 01b7 46                 [ 2 ]         rora ; bit0->carry
0126 01b8 56                 [ 2 ]         rorb ; carry->MSB
0127 01b9 e7 3c              [ 6 ]         stab buf_len-linebyte,x
0128 01bb a6 38              [ 5 ]         ldaa buf_len-linebyte-linebyte,x; bottomleft to topright
0129 01bd e6 03              [ 5 ]         ldab linebyte-1,x
0130 01bf 49                 [ 2 ]         rola ; bit6->7
0131 01c0 56                 [ 2 ]         rorb
0132 01c1 49                 [ 2 ]         rola ; bit7->carry
0133 01c2 59                 [ 2 ]         rolb ; carry->bit0
0134 01c3 e7 03              [ 6 ]         stab linebyte-1,x
0135 01c5 39                 [ 5 ]         rts
0136                               *
0137                               gen_update:
0138 01c6 fe 04 71           [ 5 ]         ldx curr_bufp
0139 01c9 86 04              [ 2 ]         ldaa #linebyte
0140 01cb b7 04 79           [ 5 ]         staa curr_off
0141                               update0:
0142 01ce 08                 [ 4 ]         inx
0143 01cf 4a                 [ 2 ]         deca
0144 01d0 26 fc              [ 4 ]         bne update0
0145 01d2 ff 04 75           [ 6 ]         stx curr_adrs ; start from line 1
0146 01d5 fe 04 73           [ 5 ]         ldx next_bufp
0147 01d8 86 04              [ 2 ]         ldaa #linebyte
0148                               update1:
0149 01da 08                 [ 4 ]         inx
0150 01db 4a                 [ 2 ]         deca
0151 01dc 26 fc              [ 4 ]         bne update1
0152 01de ff 04 77           [ 6 ]         stx next_adrs ; start from line 1
0153                               * get the shifted frames ka-kh
0154                               update_loop1:
0155 01e1 fe 04 75           [ 5 ]         ldx curr_adrs
0156 01e4 86 04              [ 2 ]         ldaa #linebyte
0157                               update2:
0158 01e6 09                 [ 4 ]         dex
0159 01e7 4a                 [ 2 ]         deca
0160 01e8 26 fc              [ 4 ]         bne update2
0161 01ea bd 03 55           [ 9 ]         jsr get3frames ; x = prev line (upper)
0162 01ed b6 04 6f           [ 4 ]         ldaa temp_word
0163 01f0 b7 04 7b           [ 5 ]         staa ka
0164 01f3 b6 04 70           [ 4 ]         ldaa temp_word+1
0165 01f6 b7 04 7c           [ 5 ]         staa kb
0166 01f9 f7 04 7d           [ 5 ]         stab kc
0167 01fc fe 04 75           [ 5 ]         ldx curr_adrs
0168 01ff bd 03 55           [ 9 ]         jsr get3frames ; x = curr line (middle)
0169 0202 b6 04 6f           [ 4 ]         ldaa temp_word
0170 0205 b7 04 7e           [ 5 ]         staa kd
0171 0208 f7 04 7f           [ 5 ]         stab ke
0172 020b fe 04 75           [ 5 ]         ldx curr_adrs
0173 020e 86 04              [ 2 ]         ldaa #linebyte
0174                               update3:
0175 0210 08                 [ 4 ]         inx
0176 0211 4a                 [ 2 ]         deca
0177 0212 26 fc              [ 4 ]         bne update3
0178 0214 bd 03 55           [ 9 ]         jsr get3frames ; x = next line (lower)
0179 0217 b6 04 6f           [ 4 ]         ldaa temp_word
0180 021a b7 04 80           [ 5 ]         staa kf
0181 021d b6 04 70           [ 4 ]         ldaa temp_word+1
0182 0220 b7 04 81           [ 5 ]         staa kg
0183 0223 f7 04 82           [ 5 ]         stab kh
0184                               * calculate neighbor counts s2 and s3
0185                               * Step 1. (xab ka) = ka + kb, (xcd kc) = kc + kd, ...
0186                               * xab = ka & kb
0187 0226 b6 04 7b           [ 4 ]         ldaa ka
0188 0229 b4 04 7c           [ 4 ]         anda kb
0189 022c b7 04 85           [ 5 ]         staa xab
0190                               * ka ^= kb
0191 022f b6 04 7b           [ 4 ]         ldaa ka
0192 0232 b8 04 7c           [ 4 ]         eora kb
0193 0235 b7 04 7b           [ 5 ]         staa ka
0194                               * xcd = kc & kd
0195 0238 b6 04 7d           [ 4 ]         ldaa kc
0196 023b b4 04 7e           [ 4 ]         anda kd
0197 023e b7 04 86           [ 5 ]         staa xcd
0198                               * kc ^= kd
0199 0241 b6 04 7d           [ 4 ]         ldaa kc
0200 0244 b8 04 7e           [ 4 ]         eora kd
0201 0247 b7 04 7d           [ 5 ]         staa kc
0202                               * xef = ke & kf
0203 024a b6 04 7f           [ 4 ]         ldaa ke
0204 024d b4 04 80           [ 4 ]         anda kf
0205 0250 b7 04 87           [ 5 ]         staa xef
0206                               * ke ^= kf
0207 0253 b6 04 7f           [ 4 ]         ldaa ke
0208 0256 b8 04 80           [ 4 ]         eora kf
0209 0259 b7 04 7f           [ 5 ]         staa ke
0210                               * xgh = kg & kh
0211 025c b6 04 81           [ 4 ]         ldaa kg
0212 025f b4 04 82           [ 4 ]         anda kh
0213 0262 b7 04 88           [ 5 ]         staa xgh
0214                               *kg ^= kh
0215 0265 b6 04 81           [ 4 ]         ldaa kg
0216 0268 b8 04 82           [ 4 ]         eora kh
0217 026b b7 04 81           [ 5 ]         staa kg
0218                               * Step 2. (kc kb ka) = (xab ka) + (xcd kc)
0219                               * kd = ka & kc
0220 026e b6 04 7b           [ 4 ]         ldaa ka
0221 0271 b4 04 7d           [ 4 ]         anda kc
0222 0274 b7 04 7e           [ 5 ]         staa kd
0223                               * ka ^= kc
0224 0277 b6 04 7b           [ 4 ]         ldaa ka
0225 027a b8 04 7d           [ 4 ]         eora kc
0226 027d b7 04 7b           [ 5 ]         staa ka
0227                               * kc = xab & xcd
0228 0280 b6 04 85           [ 4 ]         ldaa xab
0229 0283 b4 04 86           [ 4 ]         anda xcd
0230 0286 b7 04 7d           [ 5 ]         staa kc
0231                               * kb = xab ^ xcd ^ kd
0232 0289 b6 04 85           [ 4 ]         ldaa xab
0233 028c b8 04 86           [ 4 ]         eora xcd
0234 028f b8 04 7e           [ 4 ]         eora kd
0235 0292 b7 04 7c           [ 5 ]         staa kb
0236                               * Step 3. (kg kf ke) = (xef ke) + (xgh kg)
0237                               * kh = ke & kg
0238 0295 b6 04 7f           [ 4 ]         ldaa ke
0239 0298 b4 04 81           [ 4 ]         anda kg
0240 029b b7 04 82           [ 5 ]         staa kh
0241                               * ke ^= kg
0242 029e b6 04 7f           [ 4 ]         ldaa ke
0243 02a1 b8 04 81           [ 4 ]         eora kg
0244 02a4 b7 04 7f           [ 5 ]         staa ke
0245                               * g = xef & xgh
0246 02a7 b6 04 87           [ 4 ]         ldaa xef
0247 02aa b4 04 88           [ 4 ]         anda xgh
0248 02ad b7 04 81           [ 5 ]         staa kg
0249                               * kf = xef ^ xgh ^ kh
0250 02b0 b6 04 87           [ 4 ]         ldaa xef
0251 02b3 b8 04 88           [ 4 ]         eora xgh
0252 02b6 b8 04 82           [ 4 ]         eora kh
0253 02b9 b7 04 80           [ 5 ]         staa kf
0254                               * Step 4. (kc kb ka) = (kc kb ka) + (kg kf ke)
0255                               * kd = ka & ke
0256 02bc b6 04 7b           [ 4 ]         ldaa ka
0257 02bf b4 04 7f           [ 4 ]         anda ke
0258 02c2 b7 04 7e           [ 5 ]         staa kd
0259                               * ka ^= ke
0260 02c5 b6 04 7b           [ 4 ]         ldaa ka
0261 02c8 b8 04 7f           [ 4 ]         eora ke
0262 02cb b7 04 7b           [ 5 ]         staa ka
0263                               * kh = kb & kf
0264 02ce b6 04 7c           [ 4 ]         ldaa kb
0265 02d1 b4 04 80           [ 4 ]         anda kf
0266 02d4 b7 04 82           [ 5 ]         staa kh
0267                               * kb ^= kf
0268 02d7 b6 04 7c           [ 4 ]         ldaa kb
0269 02da b8 04 80           [ 4 ]         eora kf
0270 02dd b7 04 7c           [ 5 ]         staa kb
0271                               * kh |= kb & kd ;; kh = (kb & kf) | ((kb ^ kf) & (ka & ke))
0272 02e0 b6 04 7c           [ 4 ]         ldaa kb
0273 02e3 b4 04 7e           [ 4 ]         anda kd
0274 02e6 b7 04 6f           [ 5 ]         staa temp_word
0275 02e9 b6 04 82           [ 4 ]         ldaa kh
0276 02ec ba 04 6f           [ 4 ]         oraa temp_word
0277 02ef b7 04 82           [ 5 ]         staa kh
0278                               * kb ^= kd
0279 02f2 b6 04 7c           [ 4 ]         ldaa kb
0280 02f5 b8 04 7e           [ 4 ]         eora kd
0281 02f8 b7 04 7c           [ 5 ]         staa kb
0282                               * kc ^= kg ^ kh
0283 02fb b6 04 7d           [ 4 ]         ldaa kc
0284 02fe b8 04 82           [ 4 ]         eora kh
0285 0301 b8 04 81           [ 4 ]         eora kg
0286 0304 b7 04 7d           [ 5 ]         staa kc
0287                               * Step 5. Calc. s2 and s3 from (kc kb ka)
0288                               * temp_word = ~kc & kb
0289 0307 b6 04 7d           [ 4 ]         ldaa kc
0290 030a 88 ff              [ 2 ]         eora #$ff
0291 030c b4 04 7c           [ 4 ]         anda kb
0292 030f b7 04 6f           [ 5 ]         staa temp_word
0293                               * s2 = temp_word & ~ka
0294 0312 b6 04 7b           [ 4 ]         ldaa ka
0295 0315 88 ff              [ 2 ]         eora #$ff
0296 0317 b4 04 6f           [ 4 ]         anda temp_word
0297 031a b7 04 83           [ 5 ]         staa s2
0298                               * s3 = temp_word & ka
0299 031d b6 04 6f           [ 4 ]         ldaa temp_word
0300 0320 b4 04 7b           [ 4 ]         anda ka
0301 0323 b7 04 84           [ 5 ]         staa s3
0302                               * Final Step. [next_adrs] = ([curr_adrs] & s2) | s3
0303 0326 fe 04 75           [ 5 ]         ldx curr_adrs
0304 0329 a6 00              [ 5 ]         ldaa 0,x
0305 032b b4 04 83           [ 4 ]         anda s2
0306 032e ba 04 84           [ 4 ]         oraa s3
0307 0331 fe 04 77           [ 5 ]         ldx next_adrs
0308 0334 a7 00              [ 6 ]         staa 0,x
0309                               * increment the buf pointers and test
0310 0336 fe 04 75           [ 5 ]         ldx curr_adrs   ; inc current adrs
0311 0339 08                 [ 4 ]         inx
0312 033a ff 04 75           [ 6 ]         stx curr_adrs
0313 033d fe 04 77           [ 5 ]         ldx next_adrs
0314 0340 08                 [ 4 ]         inx
0315 0341 ff 04 77           [ 6 ]         stx next_adrs
0316 0344 b6 04 79           [ 4 ]         ldaa curr_off
0317 0347 4c                 [ 2 ]         inca
0318 0348 b7 04 79           [ 5 ]         staa curr_off
0319 034b 8b 04              [ 2 ]         adda #linebyte ; add one line (exit loop at maxline -1)
0320 034d 81 40              [ 2 ]         cmpa #buf_len
0321 034f 27 03              [ 4 ]         beq update4
0322 0351 7e 01 e1           [ 3 ]         jmp update_loop1
0323                               update4:
0324 0354 39                 [ 5 ]         rts
0325                               * get3frames, x=input, temp_word=left&mid frames, b=right frame
0326                               get3frames:
0327 0355 09                 [ 4 ]         dex
0328 0356 a6 00              [ 5 ]         ldaa 0,x ; get left byte
0329 0358 e6 01              [ 5 ]         ldab 1,x ; get mid byte
0330 035a f7 04 70           [ 5 ]         stab temp_word+1 ; mid frame
0331 035d 46                 [ 2 ]         rora
0332 035e 56                 [ 2 ]         rorb
0333 035f f7 04 6f           [ 5 ]         stab temp_word ; left frame
0334 0362 59                 [ 2 ]         rolb ; restore mid byte
0335 0363 a6 02              [ 5 ]         ldaa 2,x ; get right byte
0336 0365 49                 [ 2 ]         rola
0337 0366 59                 [ 2 ]         rolb ; b = righ frame
0338 0367 08                 [ 4 ]         inx ; restore x
0339 0368 39                 [ 5 ]         rts
0340                               *
0341                               print_gen_ctr:
0342 0369 bd 03 7c           [ 9 ]         jsr inc_gen_ctr
0343 036c ce 04 6b           [ 3 ]         ldx #gen_ctr
0344 036f bd e0 bf           [ 9 ]         jsr out2h
0345 0372 bd e0 bf           [ 9 ]         jsr out2h
0346 0375 bd e0 bf           [ 9 ]         jsr out2h
0347 0378 bd e0 bf           [ 9 ]         jsr out2h
0348 037b 39                 [ 5 ]         rts
0349                               *
0350                               inc_gen_ctr:
0351 037c b6 04 6e           [ 4 ]         ldaa gen_ctr+3
0352 037f 0c                 [ 2 ]         clc
0353 0380 89 01              [ 2 ]         adca #1
0354 0382 19                 [ 2 ]         daa
0355 0383 b7 04 6e           [ 5 ]         staa gen_ctr+3
0356 0386 b6 04 6d           [ 4 ]         ldaa gen_ctr+2
0357 0389 89 00              [ 2 ]         adca #0
0358 038b 19                 [ 2 ]         daa
0359 038c b7 04 6d           [ 5 ]         staa gen_ctr+2
0360 038f b6 04 6c           [ 4 ]         ldaa gen_ctr+1
0361 0392 89 00              [ 2 ]         adca #0
0362 0394 19                 [ 2 ]         daa
0363 0395 b7 04 6c           [ 5 ]         staa gen_ctr+1
0364 0398 b6 04 6b           [ 4 ]         ldaa gen_ctr
0365 039b 89 00              [ 2 ]         adca #0
0366 039d 19                 [ 2 ]         daa
0367 039e b7 04 6b           [ 5 ]         staa gen_ctr
0368 03a1 39                 [ 5 ]         rts
0369                               *
0370                               print_screen:
0371 03a2 ce 04 2a           [ 3 ]         ldx #screen_home_d ; move cursor to home
0372 03a5 bd e0 7e           [ 9 ]         jsr pdata1
0373 03a8 ce 04 5c           [ 3 ]         ldx #skiptitle_str_d ; skip title text
0374 03ab bd e0 7e           [ 9 ]         jsr pdata1
0375 03ae bd 03 69           [ 9 ]         jsr print_gen_ctr ; print ctr next to title
0376 03b1 ce 04 31           [ 3 ]         ldx #screen_home1_d ; move cursor to home
0377 03b4 bd e0 7e           [ 9 ]         jsr pdata1
0378 03b7 ce 04 26           [ 3 ]         ldx #screen_clr1_d ; clear the rest of the screen
0379 03ba bd e0 7e           [ 9 ]         jsr pdata1
0380 03bd fe 04 71           [ 5 ]         ldx curr_bufp ; init pointers
0381 03c0 ff 04 75           [ 6 ]         stx curr_adrs
0382 03c3 7f 04 79           [ 6 ]         clr curr_off
0383                               read_position:
0384 03c6 fe 04 75           [ 5 ]         ldx curr_adrs ; print contents with loop
0385 03c9 a6 00              [ 5 ]         ldaa 0,x
0386 03cb 26 08              [ 4 ]         bne rp0  ; contains dots
0387 03cd ce 04 38           [ 3 ]         ldx #skip8_d ; empty, skip 8px
0388 03d0 bd e0 7e           [ 9 ]         jsr pdata1
0389 03d3 20 15              [ 4 ]         bra rp3
0390 03d5 c6 08              [ 2 ] rp0:    ldab #8      ; draw 8 pix
0391 03d7 49                 [ 2 ] rp1:    rola
0392 03d8 36                 [ 4 ]         psha
0393 03d9 37                 [ 4 ]         pshb
0394 03da 24 04              [ 4 ]         bcc rp20 ; carry flg stores rola result
0395 03dc 86 2a              [ 2 ]         ldaa #'*
0396 03de 20 02              [ 4 ]         bra rp2
0397 03e0 86 20              [ 2 ] rp20:   ldaa #$20 ; space char
0398 03e2 bd e0 75           [ 9 ] rp2:    jsr outch
0399 03e5 33                 [ 4 ]         pulb ; bit pos count
0400 03e6 32                 [ 4 ]         pula ; bit pattern
0401 03e7 5a                 [ 2 ]         decb
0402 03e8 26 ed              [ 4 ]         bne rp1
0403 03ea b6 04 79           [ 4 ] rp3:    ldaa curr_off; test and print eol
0404 03ed c6 04              [ 2 ]         ldab #linebyte
0405 03ef 84 03              [ 2 ]         anda #blen_mask
0406 03f1 81 03              [ 2 ]         cmpa #blen_mask
0407 03f3 26 06              [ 4 ]         bne rp4
0408 03f5 ce 04 68           [ 3 ]         ldx #crlf_d
0409 03f8 bd e0 7e           [ 9 ]         jsr pdata1
0410 03fb fe 04 75           [ 5 ] rp4:    ldx curr_adrs
0411 03fe 08                 [ 4 ]         inx
0412 03ff ff 04 75           [ 6 ]         stx curr_adrs
0413 0402 b6 04 79           [ 4 ]         ldaa curr_off
0414 0405 4c                 [ 2 ]         inca
0415 0406 b7 04 79           [ 5 ]         staa curr_off
0416 0409 81 40              [ 2 ]         cmpa #buf_len
0417 040b 26 b9              [ 4 ]         bne read_position
0418 040d 39                 [ 5 ]         rts
0419                               * Swap screen buffers
0420                               swap_buffer:
0421 040e fe 04 71           [ 5 ]         ldx curr_bufp
0422 0411 ff 04 6f           [ 6 ]         stx temp_word
0423 0414 fe 04 73           [ 5 ]         ldx next_bufp
0424 0417 ff 04 71           [ 6 ]         stx curr_bufp
0425 041a fe 04 6f           [ 5 ]         ldx temp_word
0426 041d ff 04 73           [ 6 ]         stx next_bufp
0427 0420 39                 [ 5 ]         rts
0428                               * Data area
0429                               screen_clr_d:
0430 0421 1b 5b 32 4a 04                   fcb esc,'[,'2,'J,4
0431                               screen_clr1_d:
0432 0426 1b 5b 4a 04                      fcb esc,'[,'J,4
0433                               screen_home_d:
0434 042a 1b 5b 31 3b 31 48                fcb esc,'[,'1,';,'1,'H,4
     04
0435                               screen_home1_d:
0436 0431 1b 5b 32 3b 30 48                fcb esc,'[,'2,';,'0,'H,4
     04
0437                               skip8_d:
0438 0438 1b 5b 38 43 04                   fcb esc,'[,'8,'C,4
0439                               title_str_d:
0440 043d 20 5b 43 4f 4e 57                fcc " [CONWAY'S GAME OF LIFE] GEN: "
     41 59 27 53 20 47
     41 4d 45 20 4f 46
     20 4c 49 46 45 5d
     20 47 45 4e 3a 20
0441 045b 04                               fcb 4
0442                               skiptitle_str_d:
0443 045c 1b 5b 33 30 43 04                fcb esc,'[,'3,'0,'C,4
0444                               gen_str_d:
0445 0462 47 45 4e 3a 20                   fcc "GEN: "
0446 0467 04                               fcb 4
0447 0468 0d 0a 04                 crlf_d: fcb 13,10,4
0448                               gen_ctr:
0449 046b 00 00 00 00                      fcb 0,0,0,0 ; 4byte bcd
0450                               temp_word:
0451 046f 00 00                            fcb 0,0
0452                               curr_bufp:
0453 0471 00 00                            fcb 0,0
0454                               next_bufp:
0455 0473 00 00                            fcb 0,0
0456                               curr_adrs:
0457 0475 00 00                            fcb 0,0
0458                               next_adrs:
0459 0477 00 00                            fcb 0,0
0460                               curr_off:
0461 0479 00                               fcb 0
0462                               next_off:
0463 047a 00                               fcb 0
0464                               * update algorithm variables
0465 047b 00                       ka:     fcb 0
0466 047c 00                       kb:     fcb 0
0467 047d 00                       kc:     fcb 0
0468 047e 00                       kd:     fcb 0
0469 047f 00                       ke:     fcb 0
0470 0480 00                       kf:     fcb 0
0471 0481 00                       kg:     fcb 0
0472 0482 00                       kh:     fcb 0
0473 0483 00                       s2:     fcb 0
0474 0484 00                       s3:     fcb 0
0475 0485 00                       xab:    fcb 0
0476 0486 00                       xcd:    fcb 0
0477 0487 00                       xef:    fcb 0
0478 0488 00                       xgh:    fcb 0
0479                               *
0480                               screen_buf_init:
0481 0489 00 00 00 00                      fcb $00,$00,$00,$00
0482 048d 20 00 20 00                      fcb $20,$00,$20,$00
0483 0491 10 00 10 00                      fcb $10,$00,$10,$00
0484 0495 70 00 70 00                      fcb $70,$00,$70,$00
0485 0499 00 20 00 20                      fcb $00,$20,$00,$20
0486 049d 00 10 00 10                      fcb $00,$10,$00,$10
0487 04a1 00 70 00 70                      fcb $00,$70,$00,$70
0488 04a5 20 00 20 00                      fcb $20,$00,$20,$00
0489 04a9 10 00 10 00                      fcb $10,$00,$10,$00
0490 04ad 70 00 70 00                      fcb $70,$00,$70,$00
0491 04b1 00 20 00 20                      fcb $00,$20,$00,$20
0492 04b5 00 10 00 10                      fcb $00,$10,$00,$10
0493 04b9 00 70 00 70                      fcb $00,$70,$00,$70
0494 04bd 00 00 00 00                      fcb $00,$00,$00,$00
0495 04c1 00 00 00 00                      fcb $00,$00,$00,$00
0496 04c5 00 00 00 00                      fcb $00,$00,$00,$00
0497                               *
0498 0500                          var:    org $0500
0499                               screen_buf1:
0500 0500                                  rmb buf_len ; 32x16 bits = 64 bytes
0501                               screen_buf2:
0502 0540                                  rmb buf_len
0503                                       end
bheight    0010
blen_mask  0003
buf_len    0040
bwidth     0020
crlf_d     0468
curr_adrs  0475
curr_bufp  0471
curr_off   0479
esc        001b
gen_ctr    046b
gen_str_d  0462
gen_update 01c6
get3frames 0355
inc_gen_ctr 037c
init_scr1  014b
init_screen 013d
ka         047b
kb         047c
kc         047d
kd         047e
ke         047f
kf         0480
kg         0481
kh         0482
linebyte   0004
loop       012e
mirr4      0177
mirr5      0192
mirr_leftrt 017d
mirr_topbtm 0166
mirror_edges 0161
next_adrs  0477
next_bufp  0473
next_off   047a
out2h      e0bf
outch      e075
pdata1     e07e
print_gen_ctr 0369
print_screen 03a2
read_position 03c6
rp0        03d5
rp1        03d7
rp2        03e2
rp20       03e0
rp3        03ea
rp4        03fb
s2         0483
s3         0484
screen_buf1 0500
screen_buf2 0540
screen_buf_init 0489
screen_clr1_d 0426
screen_clr_d 0421
screen_home1_d 0431
screen_home_d 042a
skip8_d    0438
skiptitle_str_d 045c
swap_buffer 040e
temp_word  046f
title_str_d 043d
update0    01ce
update1    01da
update2    01e6
update3    0210
update4    0354
update_loop1 01e1
var        04c9
xab        0485
xcd        0486
xef        0487
xgh        0488
bheight    0010 *0016 0017 0082 
blen_mask  0003 *0018 0405 0406 
buf_len    0040 *0017 0049 0070 0071 0108 0113 0114 0122 0127 0128 
                      0320 0416 0500 0502 
bwidth     0020 *0015 
crlf_d     0468 *0447 0408 
curr_adrs  0475 *0456 0046 0051 0054 0145 0155 0167 0172 0303 0310 
                      0312 0381 0384 0410 0412 
curr_bufp  0471 *0452 0022 0047 0066 0077 0106 0138 0380 0421 0424 
curr_off   0479 *0460 0140 0316 0318 0382 0403 0413 0415 
esc        001b *0013 0430 0432 0434 0436 0438 0443 
gen_ctr    046b *0448 0026 0027 0028 0029 0343 0351 0355 0356 0359 
                      0360 0363 0364 0367 
gen_str_d  0462 *0444 
gen_update 01c6 *0137 0039 
get3frames 0355 *0326 0161 0168 0178 
inc_gen_ctr 037c *0350 0342 
init_scr1  014b *0050 0060 
init_screen 013d *0044 0036 
ka         047b *0465 0163 0187 0191 0193 0220 0224 0226 0256 0260 
                      0262 0294 0300 
kb         047c *0466 0165 0188 0192 0235 0264 0268 0270 0272 0279 
                      0281 0291 
kc         047d *0467 0166 0195 0199 0201 0221 0225 0230 0283 0286 
                      0289 
kd         047e *0468 0170 0196 0200 0222 0234 0258 0273 0280 
ke         047f *0469 0171 0203 0207 0209 0238 0242 0244 0257 0261 
kf         0480 *0470 0180 0204 0208 0253 0265 0269 
kg         0481 *0471 0182 0211 0215 0217 0239 0243 0248 0285 
kh         0482 *0472 0183 0212 0216 0240 0252 0266 0275 0277 0284 
linebyte   0004 *0014 0017 0018 0067 0069 0070 0071 0071 0078 0086 
                      0091 0098 0107 0114 0121 0122 0127 0128 0128 0129 0134 
                      0139 0147 0156 0173 0319 0404 
loop       012e *0037 0041 
mirr4      0177 *0079 0081 
mirr5      0192 *0099 0101 
mirr_leftrt 017d *0083 0104 
mirr_topbtm 0166 *0068 0075 
mirror_edges 0161 *0063 0037 
next_adrs  0477 *0458 0152 0307 0313 0315 
next_bufp  0473 *0454 0024 0146 0423 0426 
next_off   047a *0462 
out2h      e0bf *0010 0344 0345 0346 0347 
outch      e075 *0008 0398 
pdata1     e07e *0009 0031 0033 0035 0372 0374 0377 0379 0388 0409 
print_gen_ctr 0369 *0341 0375 
print_screen 03a2 *0370 0038 
read_position 03c6 *0383 0417 
rp0        03d5 *0390 0386 
rp1        03d7 *0391 0402 
rp2        03e2 *0398 0396 
rp20       03e0 *0397 0394 
rp3        03ea *0403 0389 
rp4        03fb *0410 0407 
s2         0483 *0473 0297 0305 
s3         0484 *0474 0301 0306 
screen_buf1 0500 *0499 0021 
screen_buf2 0540 *0501 0023 
screen_buf_init 0489 *0480 0045 
screen_clr1_d 0426 *0431 0378 
screen_clr_d 0421 *0429 0030 
screen_home1_d 0431 *0435 0376 
screen_home_d 042a *0433 0032 0371 
skip8_d    0438 *0437 0387 
skiptitle_str_d 045c *0442 0373 
swap_buffer 040e *0420 0040 
temp_word  046f *0450 0048 0055 0058 0162 0164 0169 0179 0181 0274 
                      0276 0292 0296 0299 0330 0333 0422 0425 
title_str_d 043d *0439 0034 
update0    01ce *0141 0144 
update1    01da *0148 0151 
update2    01e6 *0157 0160 
update3    0210 *0174 0177 
update4    0354 *0323 0321 
update_loop1 01e1 *0154 0322 
var        04c9 *0498 
xab        0485 *0475 0189 0228 0232 
xcd        0486 *0476 0197 0229 0233 
xef        0487 *0477 0205 0246 0250 
xgh        0488 *0478 0213 0247 0251 
